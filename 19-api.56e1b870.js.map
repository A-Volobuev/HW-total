{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,aACMC,EAAW,+BACXC,EAAU,CACZC,QAAS,CACL,YAJQ,0EAQDC,EAuDZ,W,sBAvDkBC,I,aAGbC,KAAKC,QAAU,E,iBAInBC,IAAA,c,MAAA,WAEI,IAAMC,EAAY,GAAYC,OAATT,EAAS,WAG9B,OAAOU,MAAMF,EAAWP,GACnBU,MAAK,SAAAC,GAIF,IAAIA,EAAOC,GACP,MAAM,IAAIC,MAAM,WAEpB,OAAOF,EAAOG,M,IACjBJ,MAAK,SAAAK,GAGN,OAFAC,QAAQC,IAAIF,GAELA,C,OAKfT,IAAA,kB,MAAA,WAEI,IAAMY,EAAkB,GAAuCV,OAApCT,EAAS,6BAAwCS,OAAbJ,KAAKC,SAGpE,OAAOI,MAAMS,EAAiBlB,GAC7BU,MAAK,SAAAC,GACF,IAAIA,EAAOC,GACP,MAAM,IAAIC,MAAM,WAEpB,OAAOF,EAAOG,M,IACjBJ,MAAK,SAAAK,GAEF,OADAC,QAAQC,IAAIF,GACLA,C,OAIXT,IAAA,U,IAAJ,WACI,OAAOF,KAAKC,O,MAGhB,SAAYc,GACRf,KAAKC,QAAUc,C,OAIpB,G,uCCvDGC,EAAcC,SAASC,cAAc,iBACrCC,EAAmBF,SAASC,cAAc,aAC1CE,EAAmBH,SAASC,cAAc,sBAC1CG,EAASJ,SAASC,cAAc,qBAGhCI,EAAgB,IAAIxB,EAwDR,SAATyB,EAAgBZ,GACrBK,EAAYQ,mBAAmB,aAAa,EAAAC,EAAAC,SAAsBf,G,CAtD5CK,EAAdW,iBAAiB,UAOE,SAAFC,GAEyCN,EAApDrB,QAAU2B,EAAEC,cAAcC,MAExCT,EAAOU,UAAUC,OAAO,YAGWV,EAArBW,kBACb3B,MAAK,SAAAK,GAiDNQ,EAAiBe,UAAY,GANC,SAAKvB,GACnCQ,EAAiBK,mBAAmB,aAAY,EAAAW,EAAAT,SAAuBf,G,CAxCnEyB,CAA6BzB,GAE7BU,EAAOU,UAAUM,IAAI,W,IAExBC,OAAM,SAAAC,GACHC,EAAAC,OAAOC,QACH,SACM,GAAGtC,OAANmC,GACH,O,OAzBuCvB,EAAvCW,iBAAiB,SAAS,WAClCP,EAAiBW,UAAUM,IAAI,W,IA+B/BrB,EAAYe,UAAUM,IAAI,YAG1Bf,EAAcqB,cACTrC,KAAKiB,GACLe,OAAM,SAAAC,GACHC,EAAAC,OAAOC,QACH,SACM,GAAGtC,OAANmC,GACH,O,IAGZlB,EAAOU,UAAUM,IAAI,YACrBrB,EAAYe,UAAUC,OAAO,W","sources":["src/js/components/19-cat-api.js","src/js/19-api.js"],"sourcesContent":["const API_KEY = 'live_7ad8upyX21GZXAiarpBVFKI96kSct8KgO5N7x1ungdbJekziVwWJNouLsXsd0P7L';\nconst BASE_URL = 'https://api.thecatapi.com/v1';\nconst options = {\n    headers: {\n        'X-Api-Key': API_KEY,\n    },\n};\n\nexport default class CatApiService {\n    constructor() {\n        // 5. Сохраняем выбраную породу\n        this.breedId = '';\n    }\n\n    // Запрос для селекта\n    fetchBreeds() {\n        // настройки для запроса с сервера\n        const breedsUrl = `${BASE_URL}/breeds`\n\n        // Запрос\n        return fetch(breedsUrl, options)\n            .then(resolt => {\n                // console.log(resolt.ok)\n                // Нашел только такой способ (создать самому ошибку), потому что иначе поймать ее через catch в \n                // основном джс файле я не знаю как (Срабатывает здесь на 21 строке и 30й)\n                if(!resolt.ok){\n                    throw new Error(\"Ошибка!\");\n                }\n                return resolt.json()})\n            .then(data => {\n            console.log(data); \n\n            return data;\n            });\n    }\n\n    // Запрос на информацию от селекта\n    fetchCatByBreed () {\n        // настройки для запроса с сервера\n        const selectBreedsUrl = `${BASE_URL}/images/search?breed_ids=${this.breedId}`\n\n        // Запрос\n        return fetch(selectBreedsUrl, options)\n        .then(resolt => {\n            if(!resolt.ok){\n                throw new Error(\"Ошибка!\");\n            }\n            return resolt.json()})\n        .then(data => {\n            console.log(data);\n            return data;\n        })\n    } \n\n    get idBreed() {\n        return this.breedId;\n    }\n\n    set idBreed(newBreedId) {\n        this.breedId = newBreedId;\n    }\n}\n\n// export default // fetchBreeds - получаем породы кошек\n// fetch(`${BASE_URL}/breeds`)\n//     .then(resolt => resolt.json())\n//     .then(data => {\n//         console.log(data);\n\n        // Добавляю здесь, потому что эта функция выполняется позже и данные с фетча не получить.\n        // Добавляем в селкт выбор породы кошек\n        // selectBreed.insertAdjacentHTML('beforeend', selectOptions(data))\n//     });","// Импортирую настройки select из хбс\nimport '../scss/19-api.scss'\nimport CatApiService from './components/19-cat-api';\nimport createOptionsInSelect from '../templates/19-select-option.hbs';\nimport informationBlockMarkup from '../templates/19-informative-block.hbs';\nimport { Report } from 'notiflix/build/notiflix-report-aio';\n\n// Привязываем элементы \nconst selectBreed = document.querySelector('.breed-select');\nconst informativeBlock = document.querySelector('.cat-info');\nconst decorativeOption = document.querySelector('.decorative-option');\nconst loader = document.querySelector('.container-loader'); \n\n// Добавляем сюда наш класс запросов \nconst catApiService = new CatApiService();\n\n// Слушатель событий на селектор\nselectBreed.addEventListener('change', onSelectBreedChange);\n    //Добавил что бы при первом клике убрать декоративный пустой option с select \nselectBreed.addEventListener('click', function () {\n    decorativeOption.classList.add('is-hiden');\n});\n\n//------ Функция при выборе на селекте породы \nfunction onSelectBreedChange(e) {\n    // Сохраняем выбранную в переменную, для дальнейшей загрузки полной информации\n    catApiService.breedId = e.currentTarget.value;\n\n    loader.classList.remove('is-hiden');\n    \n    // Добавляем разметку на конкретную породу\n    catApiService.fetchCatByBreed()\n    .then(data => {\n        // Очищаем страницу при выборе новой породы\n        clearInformationBlock();\n\n        createInformationBlockMarkup(data);\n\n        loader.classList.add('is-hiden')\n    })\n    .catch(error => {\n        Report.failure(\n            'Ошибка',\n            `${error}`,\n            'Okay',\n        );\n    });\n} \n\n// 3. создаем функцию запроса и добавляем выбор в селект\nfunction selectOption() {\n    selectBreed.classList.add('is-hiden')\n\n\n    catApiService.fetchBreeds()\n        .then(addSelectBreed)\n        .catch(error => {\n            Report.failure(\n                'Ошибка',\n                `${error}`,\n                'Okay',\n                );})\n\n    loader.classList.add('is-hiden')\n    selectBreed.classList.remove('is-hiden')\n}\n// 3. Вызываем фукнцию\nselectOption();\n\n// 3. Функция добавления option в select\nfunction addSelectBreed (data) {\n    selectBreed.insertAdjacentHTML('beforeend', createOptionsInSelect(data))\n}\n\n// 7. Функция добавляет разметку на страницу\nfunction createInformationBlockMarkup (data) {\n    informativeBlock.insertAdjacentHTML('beforeend',informationBlockMarkup(data)) \n}\n\n// 7. Функция очистки разметки \nfunction clearInformationBlock () {\n    informativeBlock.innerHTML = '';\n}\n\n\n// 1. Получаем ключ\n// 2. Делаем Гет запрос\n// 3. При успешном запросе, необходимо наполнить select.breed-select опциями так, чтобы value опции содержал id породы,\n    //  а в интерфейсе пользователю отображалось название породы. \n// 4.Когда пользователь выбирает опцию в селекте, необходимо выполнять запрос за полной информацией о коте на ресурс\n    //  https://api.thecatapi.com/v1/images/search. Не забудь указать в этом запросе параметр строки запроса breed_ids \n    // с идентификатором породы.\n// 5. Сохраняем выбраную породу в breedId\n// 6. fetchCatByBreed(breedId) которая ожидает идентификатор породы, делает HTTP-запрос и возвращает промис с данными \n    // о коте - результатом запроса.\n// 7. Если запрос был успешный, под селектом, в блоке div.cat-info появляется изображение и развернутая информация о \n    // коте: название породы, описание и темперамент."],"names":["$8MBJY","parcelRequire","$9ec7ca62006f9078$var$BASE_URL","$9ec7ca62006f9078$var$options","headers","$9ec7ca62006f9078$export$2e2bcd8739ae039","CatApiService","this","breedId","key","breedsUrl","concat","fetch","then","resolt","ok","Error","json","data","console","log","selectBreedsUrl","newBreedId","$0353b222821708e2$var$selectBreed","document","querySelector","$0353b222821708e2$var$informativeBlock","$0353b222821708e2$var$decorativeOption","$0353b222821708e2$var$loader","$0353b222821708e2$var$catApiService","$0353b222821708e2$var$addSelectBreed","insertAdjacentHTML","$iu6PT","default","addEventListener","e","currentTarget","value","classList","remove","fetchCatByBreed","innerHTML","$kuYwY","$0353b222821708e2$var$createInformationBlockMarkup","add","catch","error","$fivgP","Report","failure","fetchBreeds"],"version":3,"file":"19-api.56e1b870.js.map"}